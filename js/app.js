(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _modulesCurrencyRates = require('./modules/currency-rates');

var _modulesCurrencyRates2 = _interopRequireDefault(_modulesCurrencyRates);

document.querySelectorAll("[data-currency-conversion]").forEach(function (form) {
	form.addEventListener("submit", function (e) {

		var initialCurrencyAmount = this.querySelector("[data-initial-currency]").value,
		    initialCurrencyType = this.querySelector("[data-initial-currency-type]").value,
		    convertedCurrencyAmount = this.querySelector("[data-converted-currency]").value,
		    convertedCurrencyType = this.querySelector("[data-converted-currency-type]").value,
		    convertedCurrencyResult;

		convertedCurrencyResult = (0, _modulesCurrencyRates2["default"])({
			initialCurrencyAmount: initialCurrencyAmount,
			initialCurrencyType: initialCurrencyType,
			convertedCurrencyAmount: convertedCurrencyAmount,
			convertedCurrencyType: convertedCurrencyType
		}).then(function (data) {
			console.log(data);

			if (initialCurrencyType === convertedCurrencyType) {
				return initialCurrencyAmount;
			} else {

				var poundsInDollars = 1 / data.usdGBP;
				var bitcoinsInDollars = initialCurrencyAmount * data.bitcoinUSD;
				var dollarsInBitcoins = 1 / data.bitcoinUSD;

				if (initialCurrencyType === "XBT" && convertedCurrencyType === "GBP") {

					var bitcoinsInPounds = bitcoinsInDollars / poundsInDollars;

					return bitcoinsInPounds;
				}

				if (initialCurrencyType === "GBP" && convertedCurrencyType === "XBT") {

					var poundsInBitcoins = dollarsInBitcoins / data.usdGBP;

					return poundsInBitcoins;
				}
			}
		}).then(function (convertedCurrencyTotal) {
			document.querySelector("[data-converted-currency]").value = convertedCurrencyTotal;
		});

		e.preventDefault();
	});
});

},{"./modules/currency-rates":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports["default"] = getCurrencyRates;

function getCurrencyRates(conversionData) {

	// Check if either currency is BitCoin

	if ((conversionData.initialCurrencyType === "XBT" || conversionData.convertedCurrencyType === "XBT") && conversionData.initialCurrencyType !== conversionData.convertedCurrencyType) {

		var bitcoinUSD = fetch('https://api.coindesk.com/v1/bpi/currentprice/usd.json').then(function (response) {
			return response.json();
		}).then(function (data) {
			return data.bpi.USD.rate_float;
		});

		var usdGBP = fetch('https://openexchangerates.org/api/latest.json?app_id=00b59e9c79ba43c887c43fb006ba1d07').then(function (response) {
			return response.json();
		}).then(function (data) {
			return data.rates.GBP;
		});

		var combinedData = { "bitcoinUSD": {}, "usdGBP": {} };

		var totalData = Promise.all([bitcoinUSD, usdGBP]).then(function (values) {
			combinedData["bitcoinUSD"] = values[0];
			combinedData["usdGBP"] = values[1];

			return combinedData;
		});

		return totalData;
	}
}

module.exports = exports["default"];

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCIvVXNlcnMvamFtZXNob3dlbGwvU2l0ZXMvYml0Y29pbi1jdXJyZW5jeS1jb252ZXJ0ZXIvc3JjL2pzL2FwcC5qcyIsIi9Vc2Vycy9qYW1lc2hvd2VsbC9TaXRlcy9iaXRjb2luLWN1cnJlbmN5LWNvbnZlcnRlci9zcmMvanMvbW9kdWxlcy9jdXJyZW5jeS1yYXRlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7b0NDQTZCLDBCQUEwQjs7OztBQUV2RCxRQUFRLENBQUMsZ0JBQWdCLENBQUMsNEJBQTRCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBUyxJQUFJLEVBQUM7QUFDN0UsS0FBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxVQUFTLENBQUMsRUFBQzs7QUFFMUMsTUFDQSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLHlCQUF5QixDQUFDLENBQUMsS0FBSztNQUMzRSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLDhCQUE4QixDQUFDLENBQUMsS0FBSztNQUM5RSx1QkFBdUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLDJCQUEyQixDQUFDLENBQUMsS0FBSztNQUMvRSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsS0FBSztNQUNsRix1QkFBdUIsQ0FBQzs7QUFJeEIseUJBQXVCLEdBQUcsdUNBQWlCO0FBQzFDLHdCQUFxQixFQUFFLHFCQUFxQjtBQUM1QyxzQkFBbUIsRUFBRSxtQkFBbUI7QUFDeEMsMEJBQXVCLEVBQUUsdUJBQXVCO0FBQ2hELHdCQUFxQixFQUFFLHFCQUFxQjtHQUM1QyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsSUFBSSxFQUFDO0FBQ3JCLFVBQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7O0FBRWxCLE9BQUksbUJBQW1CLEtBQUsscUJBQXFCLEVBQUM7QUFDakQsV0FBTyxxQkFBcUIsQ0FBQztJQUM3QixNQUNHOztBQUVILFFBQU0sZUFBZSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0FBQ3hDLFFBQU0saUJBQWlCLEdBQUcscUJBQXFCLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztBQUNsRSxRQUFNLGlCQUFpQixHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDOztBQUc5QyxRQUFJLG1CQUFtQixLQUFLLEtBQUssSUFBSSxxQkFBcUIsS0FBSyxLQUFLLEVBQUU7O0FBRXJFLFNBQU0sZ0JBQWdCLEdBQUcsaUJBQWlCLEdBQUcsZUFBZSxDQUFDOztBQUU3RCxZQUFPLGdCQUFnQixDQUFDO0tBQ3hCOztBQUVELFFBQUksbUJBQW1CLEtBQUssS0FBSyxJQUFJLHFCQUFxQixLQUFLLEtBQUssRUFBRTs7QUFFckUsU0FBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDOztBQUV6RCxZQUFPLGdCQUFnQixDQUFDO0tBRXhCO0lBRUQ7R0FDRCxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsc0JBQXNCLEVBQUM7QUFDdkMsV0FBUSxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEtBQUssR0FBRyxzQkFBc0IsQ0FBQztHQUNuRixDQUFDLENBQUM7O0FBSUgsR0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO0VBQ25CLENBQUMsQ0FBQztDQUNILENBQUMsQ0FBQzs7Ozs7Ozs7cUJDeERxQixnQkFBZ0I7O0FBQXpCLFNBQVMsZ0JBQWdCLENBQUMsY0FBYyxFQUFFOzs7O0FBSXhELEtBQUssQ0FBQyxjQUFjLENBQUMsbUJBQW1CLEtBQUssS0FBSyxJQUFLLGNBQWMsQ0FBQyxxQkFBcUIsS0FBSyxLQUFLLENBQUEsSUFBTSxjQUFjLENBQUMsbUJBQW1CLEtBQUssY0FBYyxDQUFDLHFCQUFxQixFQUFHOztBQUd4TCxNQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsdURBQXVELENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBUyxRQUFRLEVBQUM7QUFDdEcsVUFBTyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUE7R0FDdEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLElBQUksRUFBQztBQUNyQixVQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztHQUMvQixDQUFDLENBQUM7O0FBR0gsTUFBSSxNQUFNLEdBQUcsS0FBSyxDQUFDLHVGQUF1RixDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVMsUUFBUSxFQUFDO0FBQ2xJLFVBQU8sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFBO0dBQ3RCLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBUyxJQUFJLEVBQUM7QUFDckIsVUFBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztHQUN0QixDQUFDLENBQUM7O0FBR0gsTUFBSSxZQUFZLEdBQUcsRUFBQyxZQUFZLEVBQUMsRUFBRSxFQUFDLFFBQVEsRUFBQyxFQUFFLEVBQUMsQ0FBQzs7QUFHakQsTUFBSSxTQUFTLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFTLE1BQU0sRUFBQztBQUNyRSxlQUFZLENBQUMsWUFBWSxDQUFDLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZDLGVBQVksQ0FBQyxRQUFRLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRW5DLFVBQU8sWUFBWSxDQUFDO0dBQ3BCLENBQUMsQ0FBQzs7QUFFSCxTQUFPLFNBQVMsQ0FBQztFQUdqQjtDQUVEIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsImltcG9ydCBnZXRDdXJyZW5jeVJhdGVzIGZyb20gJy4vbW9kdWxlcy9jdXJyZW5jeS1yYXRlcyc7XG5cbmRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJbZGF0YS1jdXJyZW5jeS1jb252ZXJzaW9uXVwiKS5mb3JFYWNoKGZ1bmN0aW9uKGZvcm0pe1xuXHRmb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24oZSl7XG5cblx0XHR2YXJcblx0XHRpbml0aWFsQ3VycmVuY3lBbW91bnQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoXCJbZGF0YS1pbml0aWFsLWN1cnJlbmN5XVwiKS52YWx1ZSxcblx0XHRpbml0aWFsQ3VycmVuY3lUeXBlID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtaW5pdGlhbC1jdXJyZW5jeS10eXBlXVwiKS52YWx1ZSxcblx0XHRjb252ZXJ0ZWRDdXJyZW5jeUFtb3VudCA9IHRoaXMucXVlcnlTZWxlY3RvcihcIltkYXRhLWNvbnZlcnRlZC1jdXJyZW5jeV1cIikudmFsdWUsXG5cdFx0Y29udmVydGVkQ3VycmVuY3lUeXBlID0gdGhpcy5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtY29udmVydGVkLWN1cnJlbmN5LXR5cGVdXCIpLnZhbHVlLFxuXHRcdGNvbnZlcnRlZEN1cnJlbmN5UmVzdWx0O1xuXG5cdFx0XG5cblx0XHRjb252ZXJ0ZWRDdXJyZW5jeVJlc3VsdCA9IGdldEN1cnJlbmN5UmF0ZXMoe1xuXHRcdFx0aW5pdGlhbEN1cnJlbmN5QW1vdW50OiBpbml0aWFsQ3VycmVuY3lBbW91bnQsXG5cdFx0XHRpbml0aWFsQ3VycmVuY3lUeXBlOiBpbml0aWFsQ3VycmVuY3lUeXBlLFxuXHRcdFx0Y29udmVydGVkQ3VycmVuY3lBbW91bnQ6IGNvbnZlcnRlZEN1cnJlbmN5QW1vdW50LFxuXHRcdFx0Y29udmVydGVkQ3VycmVuY3lUeXBlOiBjb252ZXJ0ZWRDdXJyZW5jeVR5cGVcblx0XHR9KS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0Y29uc29sZS5sb2coZGF0YSk7XG5cblx0XHRcdGlmIChpbml0aWFsQ3VycmVuY3lUeXBlID09PSBjb252ZXJ0ZWRDdXJyZW5jeVR5cGUpe1xuXHRcdFx0XHRyZXR1cm4gaW5pdGlhbEN1cnJlbmN5QW1vdW50O1xuXHRcdFx0fVxuXHRcdFx0ZWxzZXtcblxuXHRcdFx0XHRjb25zdCBwb3VuZHNJbkRvbGxhcnMgPSAxIC8gZGF0YS51c2RHQlA7XG5cdFx0XHRcdGNvbnN0IGJpdGNvaW5zSW5Eb2xsYXJzID0gaW5pdGlhbEN1cnJlbmN5QW1vdW50ICogZGF0YS5iaXRjb2luVVNEO1xuXHRcdFx0XHRjb25zdCBkb2xsYXJzSW5CaXRjb2lucyA9IDEgLyBkYXRhLmJpdGNvaW5VU0Q7XG5cblxuXHRcdFx0XHRpZiAoaW5pdGlhbEN1cnJlbmN5VHlwZSA9PT0gXCJYQlRcIiAmJiBjb252ZXJ0ZWRDdXJyZW5jeVR5cGUgPT09IFwiR0JQXCIpIHtcblxuXHRcdFx0XHRcdGNvbnN0IGJpdGNvaW5zSW5Qb3VuZHMgPSBiaXRjb2luc0luRG9sbGFycyAvIHBvdW5kc0luRG9sbGFycztcblxuXHRcdFx0XHRcdHJldHVybiBiaXRjb2luc0luUG91bmRzO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGluaXRpYWxDdXJyZW5jeVR5cGUgPT09IFwiR0JQXCIgJiYgY29udmVydGVkQ3VycmVuY3lUeXBlID09PSBcIlhCVFwiKSB7XG5cblx0XHRcdFx0XHRjb25zdCBwb3VuZHNJbkJpdGNvaW5zID0gZG9sbGFyc0luQml0Y29pbnMgLyBkYXRhLnVzZEdCUDtcblxuXHRcdFx0XHRcdHJldHVybiBwb3VuZHNJbkJpdGNvaW5zO1xuXG5cdFx0XHRcdH1cblxuXHRcdFx0fVxuXHRcdH0pLnRoZW4oZnVuY3Rpb24oY29udmVydGVkQ3VycmVuY3lUb3RhbCl7XG5cdFx0XHRkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiW2RhdGEtY29udmVydGVkLWN1cnJlbmN5XVwiKS52YWx1ZSA9IGNvbnZlcnRlZEN1cnJlbmN5VG90YWw7XG5cdFx0fSk7XG5cblxuXG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9KTtcbn0pOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEN1cnJlbmN5UmF0ZXMoY29udmVyc2lvbkRhdGEpIHtcblxuXHQvLyBDaGVjayBpZiBlaXRoZXIgY3VycmVuY3kgaXMgQml0Q29pblxuXG5cdGlmICggKGNvbnZlcnNpb25EYXRhLmluaXRpYWxDdXJyZW5jeVR5cGUgPT09IFwiWEJUXCIgfHwgIGNvbnZlcnNpb25EYXRhLmNvbnZlcnRlZEN1cnJlbmN5VHlwZSA9PT0gXCJYQlRcIikgJiYgIGNvbnZlcnNpb25EYXRhLmluaXRpYWxDdXJyZW5jeVR5cGUgIT09IGNvbnZlcnNpb25EYXRhLmNvbnZlcnRlZEN1cnJlbmN5VHlwZSApIHtcblxuXG5cdFx0dmFyIGJpdGNvaW5VU0QgPSBmZXRjaCgnaHR0cHM6Ly9hcGkuY29pbmRlc2suY29tL3YxL2JwaS9jdXJyZW50cHJpY2UvdXNkLmpzb24nKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXsgXG5cdFx0XHRyZXR1cm4gcmVzcG9uc2UuanNvbigpXG5cdFx0fSkudGhlbihmdW5jdGlvbihkYXRhKXtcblx0XHRcdHJldHVybiBkYXRhLmJwaS5VU0QucmF0ZV9mbG9hdDtcblx0XHR9KTtcblx0XG5cblx0XHR2YXIgdXNkR0JQID0gZmV0Y2goJ2h0dHBzOi8vb3BlbmV4Y2hhbmdlcmF0ZXMub3JnL2FwaS9sYXRlc3QuanNvbj9hcHBfaWQ9MDBiNTllOWM3OWJhNDNjODg3YzQzZmIwMDZiYTFkMDcnKS50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdHJldHVybiByZXNwb25zZS5qc29uKClcblx0XHR9KS50aGVuKGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0cmV0dXJuIGRhdGEucmF0ZXMuR0JQO1xuXHRcdH0pO1xuXHRcblxuXHRcdHZhciBjb21iaW5lZERhdGEgPSB7XCJiaXRjb2luVVNEXCI6e30sXCJ1c2RHQlBcIjp7fX07XG5cdFxuXG5cdFx0dmFyIHRvdGFsRGF0YSA9IFByb21pc2UuYWxsKFtiaXRjb2luVVNELHVzZEdCUF0pLnRoZW4oZnVuY3Rpb24odmFsdWVzKXtcblx0XHRcdGNvbWJpbmVkRGF0YVtcImJpdGNvaW5VU0RcIl0gPSB2YWx1ZXNbMF07XG5cdFx0XHRjb21iaW5lZERhdGFbXCJ1c2RHQlBcIl0gPSB2YWx1ZXNbMV07XG5cblx0XHRcdHJldHVybiBjb21iaW5lZERhdGE7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdG90YWxEYXRhO1xuXG5cblx0fVxuXG59XG4iXX0=
