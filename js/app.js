(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var _modulesCurrencyRates = require('./modules/currency-rates');

var _modulesCurrencyRates2 = _interopRequireDefault(_modulesCurrencyRates);

document.querySelectorAll("[data-currency-conversion]").forEach(function (form) {

	form.addEventListener("submit", function (e) {

		var initialCurrencyAmount = this.querySelector("[data-initial-currency]").value;
		var initialCurrencyType = this.querySelector("[data-initial-currency-type]").value;
		var convertedCurrencyAmount = this.querySelector("[data-converted-currency]").value;
		var convertedCurrencyType = this.querySelector("[data-converted-currency-type]").value;
		var convertedCurrencyResult = 0;

		if (initialCurrencyType !== convertedCurrencyType) {

			convertedCurrencyResult = (0, _modulesCurrencyRates2["default"])({
				initialCurrencyAmount: initialCurrencyAmount,
				initialCurrencyType: initialCurrencyType,
				convertedCurrencyAmount: convertedCurrencyAmount,
				convertedCurrencyType: convertedCurrencyType
			}).then(function (data) {

				var poundsInDollars = 1 / data.usdGBP;
				var bitcoinsInDollars = initialCurrencyAmount * data.bitcoinUSD;
				var dollarsInBitcoins = 1 / data.bitcoinUSD;

				if (initialCurrencyType === "XBT" && convertedCurrencyType === "GBP") {

					var bitcoinsInPounds = bitcoinsInDollars / poundsInDollars;

					return bitcoinsInPounds;
				}

				if (initialCurrencyType === "GBP" && convertedCurrencyType === "XBT") {

					var poundsInBitcoins = dollarsInBitcoins / data.usdGBP;

					return poundsInBitcoins;
				}
			}).then(function (convertedCurrencyTotal) {
				document.querySelector("[data-converted-currency]").value = convertedCurrencyTotal;
			});
		} else {
			document.querySelector("[data-converted-currency]").value = initialCurrencyAmount;
		}

		e.preventDefault();
	});

	form.querySelectorAll("[data-linked-select]").forEach(function (selectBox) {

		selectBox.addEventListener("change", function () {
			var _this = this;

			var selectID = this.attributes.id.value;

			form.querySelectorAll('[data-linked-to="' + selectID + '"]').forEach(function (element) {
				element.innerText = 'Amount in ' + _this.value;

				if (element.hasAttribute("placeholder")) {
					element.attributes.placeholder.value = 'Amount in ' + _this.value;
				}
			});
		});
	});
});

},{"./modules/currency-rates":2}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports["default"] = getCurrencyRates;

function getCurrencyRates(conversionData) {

	// Check if either currency is BitCoin

	if (conversionData.initialCurrencyType === "XBT" || conversionData.convertedCurrencyType === "XBT") {
		var _ret = (function () {

			// Use CoinDesk API to retrieve the current Bitcoin to US Dollar exchange rate

			var bitcoinUSD = fetch('https://api.coindesk.com/v1/bpi/currentprice/usd.json').then(function (response) {
				return response.json();
			}).then(function (data) {
				return data.bpi.USD.rate_float;
			});

			// Use OpenExchangeRates API to retrieve the current US Dollar to Great British Pound exchange rate

			var usdGBP = fetch('https://openexchangerates.org/api/latest.json?app_id=00b59e9c79ba43c887c43fb006ba1d07').then(function (response) {
				return response.json();
			}).then(function (data) {
				return data.rates.GBP;
			});

			// Create a blank object with named attributes to store the exchange rates in

			var combinedData = { "bitcoinUSD": {}, "usdGBP": {} };

			// Combine the two Fetch API requests into a single promise. The 'then' function which runs when the promise is resolved will only run if both APIs gave a response.

			var totalData = Promise.all([bitcoinUSD, usdGBP]).then(function (values) {
				combinedData["bitcoinUSD"] = values[0];
				combinedData["usdGBP"] = values[1];

				return combinedData;
			});

			return {
				v: totalData
			};
		})();

		if (typeof _ret === "object") return _ret.v;
	}
}

module.exports = exports["default"];

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
